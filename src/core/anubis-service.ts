// core/anubis-service.ts

import path from 'path';
import { ConfigService } from './config/config-service';
import { ConfigLoader } from './config/config-loader';
import { ConfigMerger } from './config/config-merger';
import { ConfigValidator } from './config/config-validator';
import { Utility } from '@domain/models/Utility';
import { ClassExtractor } from './extraction/class-extractor';
import { ClassParser } from './extraction/class-parser';
import { RuleGenerator } from './generation/rule-generator';
import { VariantGenerator } from './generation/variant-generator';
import { ColorGenerator } from './generation/color-generator';
import { FileScanner } from '@infrastructure/filesystem/file-scanner';
import { CSSWriter } from '@infrastructure/output/css-writer';
import { log } from '@shared/utils/logger';

export class AnubisService {
  private configService: ConfigService;
  private utilities: Utility[] = [];

  constructor(private readonly userConfigPath?: string) {
    // Initialize config service
    const configLoader = new ConfigLoader(
      path.resolve(__dirname, '../../src/config'),
      userConfigPath
    );
    const configMerger = new ConfigMerger();
    const configValidator = new ConfigValidator();

    this.configService = new ConfigService(
      configLoader,
      configMerger,
      configValidator
    );
  }

  /**
   * Initialize the service
   */
  async initialize(): Promise<void> {
    // Load and validate config
    const config = this.configService.initialize();

    // Create utility instances
    this.utilities = config.utilities.map(cfg => Utility.create(cfg));

    log(`‚úÖ Initialized ${this.utilities.length} utilities`);
  }

  /**
   * Generate CSS from source files
   */
  async generate(outputPath: string): Promise<void> {
    const config = this.configService.getConfig();

    log('üîç Extracting classes from files...');

    // Extract classes
    const fileScanner = new FileScanner();
    const extractor = new ClassExtractor(
      fileScanner,
      this.utilities,
      config.states
    );

    const classes = await extractor.extract(
      config.files,
      config.forcedClasses
    );

    log(`  ‚úì Found ${classes.length} classes`);

    // Parse classes
    log('üî® Generating CSS rules...');

    const parser = new ClassParser(this.utilities);
    const ruleGenerator = new RuleGenerator();

    const rules = [];
    for (const className of classes) {
      const parsed = parser.parse(className);
      if (parsed) {
        const rule = ruleGenerator.generate(parsed);
        rules.push(rule);
      } else {
        log(`  ‚ö†Ô∏è  Could not parse class: ${className}`);
      }
    }

    log(`  ‚úì Generated ${rules.length} CSS rules`);

    // Generate color mixin and includes
    const colorGenerator = new ColorGenerator();
    const colorMixin = colorGenerator.generateColorMixin();
    const colorIncludes = colorGenerator.generateColorIncludes(config.colors);

    // Generate variant variables
    const variantGenerator = new VariantGenerator();
    const variantVariables = variantGenerator.generateVariables(this.utilities);

    // Generate CSS rules
    const cssRules = ruleGenerator.generateCSS(rules);

    // Combine all sections with proper comments
    const sections = [];

    // Color mixin section
    sections.push(colorMixin);

    // Color includes section
    sections.push(
      `/**\n * These colours will be mapped to css variables in\n * the :root element on the html page.\n *\n * It allows you to write custom css/scss classes in your web\n * components.\n */\n${colorIncludes}`
    );

    // Variant variables section
    if (variantVariables) {
      sections.push(
        `/**\n * These css variables are generated automatically when Anubis\n * detects that they are used in preset/qol in your config.\n *\n * It allows you to write custom css/scss classes in your web\n * components like:\n *\n * .paragraph-small {\n *    font-size: var(--size-xs);\n *    font-weight: var(--weight-light);\n * }\n *\n * (You can also force the generation of all variants from a\n * preset/qol by setting the 'export-variations' to 'true')\n */\n${variantVariables}`
      );
    }

    // CSS rules section
    sections.push(
      `/**\n * These are the css classes generated by Anubis based on your config\n * and what was detected in your source files.\n */\n${cssRules}`
    );

    const cssContent = sections.join('\n\n');

    // Write to file
    log('üìù Writing CSS file...');

    const writer = new CSSWriter();
    const finalContent = writer.generateFile(cssContent, '2.0.0');
    await writer.write(outputPath, finalContent);

    log(`‚úÖ CSS generated successfully at ${outputPath}`);
  }

  /**
   * Get utilities
   */
  getUtilities(): Utility[] {
    return this.utilities;
  }

  /**
   * Get config service
   */
  getConfigService(): ConfigService {
    return this.configService;
  }
}
